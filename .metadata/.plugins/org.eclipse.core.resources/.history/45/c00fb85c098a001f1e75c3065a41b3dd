package Admin.Controller;

import java.time.LocalDateTime;
import java.util.*;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import Admin.Models.*;
import Admin.Repository.*;

@RestController
@RequestMapping("api/delivery")
public class DeliveryController {
	@Autowired
	private DeliveryRepository deliveryRepo;
	@Autowired
	private ShippingMethodRepository shippingMethodRepo;
	
	@GetMapping("/allDelivery")
	public ResponseEntity<?> getAll(){
		List<Delivery> delivery = deliveryRepo.findAll();
		return ResponseEntity.ok(delivery);
	}
	
	@GetMapping("/deliveryByProject")
	public ResponseEntity<?> getByProjectId(int projectId){
		Delivery delivery = deliveryRepo.findByProjectId(projectId);
		return ResponseEntity.ok(delivery);
	}
	
	@PostMapping("/shipping")
    public ResponseEntity<?> shipProject(@RequestBody Delivery dataDelivery) {
        Optional<Delivery> deliveryOpt = deliveryRepo.findById(dataDelivery.getId());
        if(deliveryOpt.isEmpty()) {
        	return ResponseEntity.badRequest().body("FAIL");
        }
        Delivery delivery = deliveryOpt.get();
        delivery.setStatus(Delivery.DeliveryStatus.DA_VAN_CHUYEN);
        delivery.setEstimateDeliveryTime(dataDelivery.getEstimateDeliveryTime()); 
        delivery.setDeliveryId(dataDelivery.getDeliveryId());
        Delivery savedDelivery = deliveryRepo.save(delivery);
        return ResponseEntity.ok(savedDelivery);
    }
	
	@PostMapping("/create")
    public ResponseEntity<?> createDelivery(@RequestBody Delivery delivery) {
        delivery.setStatus(Delivery.DeliveryStatus.DANG_GIAO);
        Delivery savedDelivery = deliveryRepo.save(delivery);
        return ResponseEntity.ok(savedDelivery);
    }
	
	@GetMapping("/method")
	public ResponseEntity<?> getAllMethod(){
		List<ShippingMethod> method = shippingMethodRepo.findAll();
		return ResponseEntity.ok(method);
	}
	
	@PostMapping("/confirm")
	public ResponseEntity<?> confirm(int deliveryId){
		Optional<Delivery> deliveryOpt = deliveryRepo.findById(deliveryId);
		if(deliveryOpt.isEmpty()) {
			return ResponseEntity.badRequest().body("FAIL");
		}
		Delivery delivery = deliveryOpt.get();
		delivery.setActualDeliveryTime(LocalDateTime.now());
		delivery.setStatus(Delivery.DeliveryStatus.DA_GIAO_HANG);
		return ResponseEntity.ok("Thành công");
	}
}
